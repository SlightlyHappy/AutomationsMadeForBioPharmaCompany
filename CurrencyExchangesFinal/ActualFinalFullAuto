from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
import os
import time
import datetime

# Set User-Agent for Edge options
user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
options = webdriver.EdgeOptions()
options.add_argument(f'user-agent={user_agent}')

# Get the user's home download directory
home_directory = os.path.expanduser("~")
downloads_directory = os.path.join(home_directory, "Downloads")

# Initialize the webdriver with options
driver = webdriver.Edge(options=options)

# Directly navigate to the ERIS report page
driver.get("https://eris.sanofi.com:8443/ERIS/#reportPage%26report%3DSANAVE_BMAR")

# Wait for the page to load completely
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))

# Perform the tab and enter keystrokes
actions = ActionChains(driver)
actions.send_keys(Keys.TAB).send_keys(Keys.TAB).send_keys(Keys.TAB) 
actions.send_keys(Keys.ENTER) 
actions.send_keys(Keys.TAB).send_keys(Keys.ENTER) 
actions.send_keys(Keys.TAB).send_keys(Keys.ENTER) 
actions.perform()

def click_button_by_xpath(driver, xpath, timeout=10):
    """Clicks a button located by its XPath, with error handling."""
    try:
        button = WebDriverWait(driver, timeout).until(
            EC.element_to_be_clickable((By.XPATH, xpath))
        )
        button.click()
    except Exception as e:
        print(f"Error clicking button with XPath '{xpath}': {e}")

def download_and_save_report(driver, button_xpath, save_directory, timeout=10):
    """Clicks the download button and saves the latest downloaded file to the specified directory."""
    try:
        download_button = WebDriverWait(driver, timeout).until(
            EC.element_to_be_clickable((By.XPATH, button_xpath))
        )
        download_button.click()

        # Dynamic wait for the download to complete (more reliable than fixed time.sleep)
        while True:
            downloaded_files = [
                f
                for f in os.listdir(downloads_directory)
                if os.path.isfile(os.path.join(downloads_directory, f))
            ]
            if downloaded_files:
                latest_file = max(
                    downloaded_files,
                    key=lambda f: os.path.getctime(
                        os.path.join(downloads_directory, f)
                    ),
                )
                # Check if the file is still being downloaded (size is changing)
                current_size = os.path.getsize(
                    os.path.join(downloads_directory, latest_file)
                )
                time.sleep(1)  # Short delay to allow size change
                new_size = os.path.getsize(
                    os.path.join(downloads_directory, latest_file)
                )
                if current_size == new_size:
                    break  # Download complete

        os.rename(
            os.path.join(downloads_directory, latest_file),
            os.path.join(save_directory, latest_file),
        )
    except Exception as e:
        print(
            f"Error downloading and saving report using button with XPath '{button_xpath}': {e}"
        )

# Prompt the user for the directory
base_directory = input("Enter the directory containing 'Year0' and 'Year1' folders: ")

# Create the download directories if they don't exist
year0_dir = os.path.join(base_directory, "Year0")
year1_dir = os.path.join(base_directory, "Year1")
os.makedirs(year0_dir, exist_ok=True)
os.makedirs(year1_dir, exist_ok=True)


try:

    # 1. Locate the first button using its XPath
    first_button_xpath = "/html/body/div/div[2]/table/tbody/tr/td/table/tbody/tr/td[5]/div/div/div/div[1]/div[2]/div/div/div/div[3]/table/tbody[1]/tr/td[3]/div/div/table/tbody/tr/td/table/tbody/tr/td[1]/button"

    # 2. Click the second button
    second_button_xpath = "/html/body/div/div[2]/table/tbody/tr/td/table/tbody/tr/td[5]/div/div/div/div[1]/div[2]/div/div/div/div[3]/table/tbody[1]/tr/td[3]/div/div/button"

    # Define the XPaths 
    download_report_button_xpath = "/html/body/div[1]/div[2]/table/tbody/tr/td/table/tbody/tr/td[5]/div/div/div/div[2]/div[1]/div/div/div[1]/table/tbody/tr/td/table/tbody/tr/td[5]/span"
    button_xpaths = [
        "/html/body/div[1]/div[2]/table/tbody/tr/td/table/tbody/tr/td[5]/div/div/div/div[1]/div[1]/div/div",
        "/html/body/div[1]/div[2]/table/tbody/tr/td/table/tbody/tr/td[5]/div/div/div/div[1]/div[2]/div/div/div/div[3]/table/tbody[1]/tr/td[3]/div/div/table/tbody/tr/td/table/tbody/tr/td[9]/button",
        "/html/body/div[1]/div[2]/table/tbody/tr/td/table/tbody/tr/td[5]/div/div/div/div[1]/div[2]/div/div/div/div[3]/table/tbody[1]/tr/td[3]/div/div/button"
    ]
    second_download_button_xpath = "/html/body/div[1]/div[2]/table/tbody/tr/td/table/tbody/tr/td[5]/div/div/div/div[2]/div[1]/div/div/div[1]/table/tbody/tr/td/table/tbody/tr/td[5]/span"


    # 1. Click the first button
    click_button_by_xpath(driver, first_button_xpath)

    # 2. Click the second button
    click_button_by_xpath(driver, second_button_xpath)

    # 3. Download and save the first report
    download_and_save_report(driver, download_report_button_xpath, year0_dir)

    # 4. Click the sequence of buttons
    for button_xpath in button_xpaths:
        click_button_by_xpath(driver, button_xpath)

    # 5. Download and save the second report
    download_and_save_report(driver, second_download_button_xpath, year1_dir)

except Exception as e:
    print(f"An error occurred: {e}")

# Wait for 600 seconds
time.sleep(20)

# Close the browser when done
driver.quit()
